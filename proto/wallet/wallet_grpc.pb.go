// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/wallet/wallet.proto

package wallet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WalletTopUP_CreateWallet_FullMethodName = "/proto_wallet.WalletTopUP/CreateWallet"
	WalletTopUP_Balance_FullMethodName      = "/proto_wallet.WalletTopUP/Balance"
	WalletTopUP_TopUp_FullMethodName        = "/proto_wallet.WalletTopUP/TopUp"
)

// WalletTopUPClient is the client API for WalletTopUP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletTopUPClient interface {
	CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*CreateWalletResponse, error)
	Balance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error)
	TopUp(ctx context.Context, in *TopUpRequest, opts ...grpc.CallOption) (*TopUpResponse, error)
}

type walletTopUPClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletTopUPClient(cc grpc.ClientConnInterface) WalletTopUPClient {
	return &walletTopUPClient{cc}
}

func (c *walletTopUPClient) CreateWallet(ctx context.Context, in *CreateWalletRequest, opts ...grpc.CallOption) (*CreateWalletResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateWalletResponse)
	err := c.cc.Invoke(ctx, WalletTopUP_CreateWallet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletTopUPClient) Balance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*BalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BalanceResponse)
	err := c.cc.Invoke(ctx, WalletTopUP_Balance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletTopUPClient) TopUp(ctx context.Context, in *TopUpRequest, opts ...grpc.CallOption) (*TopUpResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TopUpResponse)
	err := c.cc.Invoke(ctx, WalletTopUP_TopUp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletTopUPServer is the server API for WalletTopUP service.
// All implementations must embed UnimplementedWalletTopUPServer
// for forward compatibility.
type WalletTopUPServer interface {
	CreateWallet(context.Context, *CreateWalletRequest) (*CreateWalletResponse, error)
	Balance(context.Context, *BalanceRequest) (*BalanceResponse, error)
	TopUp(context.Context, *TopUpRequest) (*TopUpResponse, error)
	mustEmbedUnimplementedWalletTopUPServer()
}

// UnimplementedWalletTopUPServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWalletTopUPServer struct{}

func (UnimplementedWalletTopUPServer) CreateWallet(context.Context, *CreateWalletRequest) (*CreateWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWallet not implemented")
}
func (UnimplementedWalletTopUPServer) Balance(context.Context, *BalanceRequest) (*BalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Balance not implemented")
}
func (UnimplementedWalletTopUPServer) TopUp(context.Context, *TopUpRequest) (*TopUpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopUp not implemented")
}
func (UnimplementedWalletTopUPServer) mustEmbedUnimplementedWalletTopUPServer() {}
func (UnimplementedWalletTopUPServer) testEmbeddedByValue()                     {}

// UnsafeWalletTopUPServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletTopUPServer will
// result in compilation errors.
type UnsafeWalletTopUPServer interface {
	mustEmbedUnimplementedWalletTopUPServer()
}

func RegisterWalletTopUPServer(s grpc.ServiceRegistrar, srv WalletTopUPServer) {
	// If the following call pancis, it indicates UnimplementedWalletTopUPServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WalletTopUP_ServiceDesc, srv)
}

func _WalletTopUP_CreateWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletTopUPServer).CreateWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletTopUP_CreateWallet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletTopUPServer).CreateWallet(ctx, req.(*CreateWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletTopUP_Balance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletTopUPServer).Balance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletTopUP_Balance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletTopUPServer).Balance(ctx, req.(*BalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WalletTopUP_TopUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletTopUPServer).TopUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WalletTopUP_TopUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletTopUPServer).TopUp(ctx, req.(*TopUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// WalletTopUP_ServiceDesc is the grpc.ServiceDesc for WalletTopUP service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WalletTopUP_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto_wallet.WalletTopUP",
	HandlerType: (*WalletTopUPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWallet",
			Handler:    _WalletTopUP_CreateWallet_Handler,
		},
		{
			MethodName: "Balance",
			Handler:    _WalletTopUP_Balance_Handler,
		},
		{
			MethodName: "TopUp",
			Handler:    _WalletTopUP_TopUp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/wallet/wallet.proto",
}

const (
	Wallet_ReserveFunds_FullMethodName = "/proto_wallet.Wallet/ReserveFunds"
	Wallet_ReleaseFunds_FullMethodName = "/proto_wallet.Wallet/ReleaseFunds"
	Wallet_CommitFunds_FullMethodName  = "/proto_wallet.Wallet/CommitFunds"
)

// WalletClient is the client API for Wallet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WalletClient interface {
	ReserveFunds(ctx context.Context, in *ReserveFundsRequest, opts ...grpc.CallOption) (*ReserveFundsResponse, error)
	ReleaseFunds(ctx context.Context, in *ReleaseFundsRequest, opts ...grpc.CallOption) (*ReleaseFundsResponse, error)
	CommitFunds(ctx context.Context, in *CommitFundsRequest, opts ...grpc.CallOption) (*CommitFundsResponse, error)
}

type walletClient struct {
	cc grpc.ClientConnInterface
}

func NewWalletClient(cc grpc.ClientConnInterface) WalletClient {
	return &walletClient{cc}
}

func (c *walletClient) ReserveFunds(ctx context.Context, in *ReserveFundsRequest, opts ...grpc.CallOption) (*ReserveFundsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReserveFundsResponse)
	err := c.cc.Invoke(ctx, Wallet_ReserveFunds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) ReleaseFunds(ctx context.Context, in *ReleaseFundsRequest, opts ...grpc.CallOption) (*ReleaseFundsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReleaseFundsResponse)
	err := c.cc.Invoke(ctx, Wallet_ReleaseFunds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletClient) CommitFunds(ctx context.Context, in *CommitFundsRequest, opts ...grpc.CallOption) (*CommitFundsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommitFundsResponse)
	err := c.cc.Invoke(ctx, Wallet_CommitFunds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WalletServer is the server API for Wallet service.
// All implementations must embed UnimplementedWalletServer
// for forward compatibility.
type WalletServer interface {
	ReserveFunds(context.Context, *ReserveFundsRequest) (*ReserveFundsResponse, error)
	ReleaseFunds(context.Context, *ReleaseFundsRequest) (*ReleaseFundsResponse, error)
	CommitFunds(context.Context, *CommitFundsRequest) (*CommitFundsResponse, error)
	mustEmbedUnimplementedWalletServer()
}

// UnimplementedWalletServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWalletServer struct{}

func (UnimplementedWalletServer) ReserveFunds(context.Context, *ReserveFundsRequest) (*ReserveFundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveFunds not implemented")
}
func (UnimplementedWalletServer) ReleaseFunds(context.Context, *ReleaseFundsRequest) (*ReleaseFundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseFunds not implemented")
}
func (UnimplementedWalletServer) CommitFunds(context.Context, *CommitFundsRequest) (*CommitFundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitFunds not implemented")
}
func (UnimplementedWalletServer) mustEmbedUnimplementedWalletServer() {}
func (UnimplementedWalletServer) testEmbeddedByValue()                {}

// UnsafeWalletServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WalletServer will
// result in compilation errors.
type UnsafeWalletServer interface {
	mustEmbedUnimplementedWalletServer()
}

func RegisterWalletServer(s grpc.ServiceRegistrar, srv WalletServer) {
	// If the following call pancis, it indicates UnimplementedWalletServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Wallet_ServiceDesc, srv)
}

func _Wallet_ReserveFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveFundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ReserveFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_ReserveFunds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ReserveFunds(ctx, req.(*ReserveFundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_ReleaseFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseFundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).ReleaseFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_ReleaseFunds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).ReleaseFunds(ctx, req.(*ReleaseFundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wallet_CommitFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitFundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WalletServer).CommitFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Wallet_CommitFunds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WalletServer).CommitFunds(ctx, req.(*CommitFundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Wallet_ServiceDesc is the grpc.ServiceDesc for Wallet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Wallet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto_wallet.Wallet",
	HandlerType: (*WalletServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReserveFunds",
			Handler:    _Wallet_ReserveFunds_Handler,
		},
		{
			MethodName: "ReleaseFunds",
			Handler:    _Wallet_ReleaseFunds_Handler,
		},
		{
			MethodName: "CommitFunds",
			Handler:    _Wallet_CommitFunds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/wallet/wallet.proto",
}
